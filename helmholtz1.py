####This will contain all the equations that will be be needed to calculate the optimal parameter space. 

import numpy as np 
import matplotlib.pyplot as plt 
from scipy import interpolate 
from scipy import integrate

''' I think that we will need to specify N (number of turns in each solenoid), 
    I (current through each solenoid), and r (radius of solenoid) later. '''

####The temperatures for each region of the cryostat
Ta = 300.  #the external temperature of the cryostat (K)
Tb = 50.   #the temperature of the first stage (K)
Tc = 4.    #the temperature of the second stage (K)
Td = 1.    #the temperature of the Helium-4 stage (K)
Te = 0.35  #the temperature of the Helium-3 stage (K)
Tf = 0.1   #the temperature of the detector (servo controlled) (K)


####Common parameters
rho_cu = 1.4  #electrical resistivity of copper 300K-70K (assumed T independant) (micro ohm cm)
mu_0 = 40*np.pi # or 1.257 # micro T m / A
mu_r = 1. # This will need to be experimentally determined later for our cryostat

R = rho_cu * l / A

'''####Joule heating in the Helmholtz coil
# Joule heating (H) = I^2 * R (current^2 * resistance of copper) in W --> Sam
Q_b_joule_heating  = (I_ADR/2)**2*R_b_magnet_leads/(10**6)  #divided current by two since there are two wires for each lead
print "Q_b_joule_heating =",Q_b_joule_heating,"W"'''

def B_0(N, I, r):
	''' Calculate the magnetic field generated by a Helmholtz coil at its center. '''
    return np.sqrt((4/5)**3) * mu_0 * mu_r * N * I / r
    
    
def Q_joule_heating(I, R):
	''' Calculate the Joule heating for our Helmholtz coil. '''
	return I**2 * R/(10**6)
	
print "B_0 = ", B_0(N, I, r), "T"
print "Q_joule_heating = ", Q_joule_heating(I, R), "W"
